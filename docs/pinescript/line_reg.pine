//@version=5
strategy("Enhanced Linear Regression Channel Strategy", overlay=true, initial_capital=1000, default_qty_type=strategy.fixed, default_qty_value=1)

// 입력 변수
lengthInput = input.int(150, title="Length", minval = 1, maxval = 5000)
sourceInput = input.source(close, title="Source")

// RSI 설정
rsiLength = input.int(14, "RSI Length", minval=1)
rsiLowerBound = input.int(25, "RSI Lower Bound", minval=0, maxval=100)
rsiUpperBound = input.int(75, "RSI Upper Bound", minval=0, maxval=100)

// 채널 설정
bounceStrength = input.int(4, "Minimum Bounce Bars", minval=1)
upperMultInput = input.float(3, title="Upper Multiplier")
lowerMultInput = input.float(3, title="Lower Multiplier")

// TPSL 설정
tp_points = input.float(800, "Take Profit Points", minval=0)
sl_points = input.float(800, "Stop Loss Points", minval=0)

// 필터 설정
minSlopeFilter = input.float(5.7, "Minimum Slope Value", minval=0.0, step=0.1)
minTrendBars = input.int(67, "Minimum Trend Duration", minval=1, tooltip="현재 방향의 추세가 지속되어야 하는 최소 봉 수")

// RSI 계산
rsi = ta.rsi(close, rsiLength)
isValidRsi = rsi >= rsiLowerBound and rsi <= rsiUpperBound

// 기울기 계산 함수
calcSlope(source, length) =>
    float sumX = 0.0
    float sumY = 0.0
    float sumXY = 0.0
    float sumX2 = 0.0
    float price = 0.0

    for i = length - 1 to 0
        price := source[i]
        x = length - 1 - i
        sumX += x
        sumY += price
        sumXY += x * price
        sumX2 += x * x

    float n = length
    float slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)
    float intercept = (sumY - slope * sumX) / n
    float average = sumY / n
    [slope, average, intercept]

// 표준편차 계산
calcStdDev(source, length, slope, intercept) =>
    sum = 0.0
    for i = 0 to length - 1 by 1
        expectedPrice = intercept + slope * float(i)
        diff = source[i] - expectedPrice
        sum += diff * diff
    stdDev = math.sqrt(sum / length)
    stdDev

// 채널 계산
[slope, average, intercept] = calcSlope(sourceInput, lengthInput)
// slope, average, intercept 값을 차트에 표시
// plot(slope, color=color.yellow, title="Slope")
// plot(average, color=color.orange, title="Average")
// plot(intercept, color=color.purple, title="Intercept")
// 중심선 
// middleLine = na(slope) ? na : intercept + slope * bar_index 
middleLine = na(slope) ? na : intercept + slope * ((close + open)/2)
// middleLine = na(slope) ? na : intercept + slope * close

plot(middleLine, color=color.blue, title="Middle Line")

// 표준편차 계산
stdDev = calcStdDev(sourceInput, lengthInput, slope, intercept)

// 상단/하단 밴드
upperBand = na(middleLine) ? na : middleLine + upperMultInput * stdDev
lowerBand = na(middleLine) ? na : middleLine - lowerMultInput * stdDev

plot(upperBand, color=color.red, title="Upper Band")
plot(lowerBand, color=color.green, title="Lower Band")

// 수정된 추세 방향 (횡보장을 상승으로 처리)
isUptrend = slope >= 0
isDowntrend = slope < 0

// 기울기 강도 필터
isValidSlope = math.abs(slope) >= minSlopeFilter

// 추세 지속성 계산
var int trendDuration = 0
trendDuration := isUptrend ? (nz(trendDuration[1]) >= 0 ? nz(trendDuration[1]) + 1 : 1) : 
                 isDowntrend ? (nz(trendDuration[1]) <= 0 ? nz(trendDuration[1]) - 1 : -1) : 0

isValidTrendDuration = isUptrend ? trendDuration >= minTrendBars : trendDuration <= -minTrendBars

// 바운스 확인 함수
confirmBounce(length) =>
    count = 0
    for i = 1 to length by 1
        if isUptrend and low[i] <= lowerBand[i] and close[i] > close[i-1]
            count += 1
        else if isDowntrend and high[i] >= upperBand[i] and close[i] < close[i-1]
            count += 1

    [count >= length, count]  // count 값도 같이 반환

[bounceConfirmed, bounceCount] = confirmBounce(bounceStrength)
plotchar(bounceCount, "Bounce Count", "", location.top)  // 메인 스코프에서 카운트 값 표시

// 진입 조건 (한 줄로 수정)
longCondition = isUptrend and low <= lowerBand and strategy.position_size <= 0 and bounceConfirmed and strategy.opentrades == 0 and isValidRsi and isValidSlope and isValidTrendDuration
shortCondition = isDowntrend and high >= upperBand and strategy.position_size >= 0 and bounceConfirmed and strategy.opentrades == 0 and isValidRsi and isValidSlope and isValidTrendDuration

// 디버깅을 위한 플롯
plotchar(slope, "Slope Value", "", location.top)
plotchar(rsi, "RSI Value", "", location.top)
plotchar(trendDuration, "Trend Duration", "", location.top)
// plotchar(bar_index, "Bar Index", "", location.top)  // 추가된 라인
// 포지션 관리
var float entryPrice = na

if longCondition
    entryPrice := close
    strategy.entry("Long", strategy.long)

if shortCondition
    entryPrice := close
    strategy.entry("Short", strategy.short)

if strategy.position_size > 0 and not na(entryPrice)
    strategy.exit("Long TP/SL", stop=entryPrice * (1 - sl_points/100000), limit=entryPrice * (1 + tp_points/100000))

if strategy.position_size < 0 and not na(entryPrice)
    strategy.exit("Short TP/SL", stop=entryPrice * (1 + sl_points/100000), limit=entryPrice * (1 - tp_points/100000))

// 시그널 표시
bgcolor(longCondition ? color.new(color.green, 90) : shortCondition ? color.new(color.red, 90) : na)